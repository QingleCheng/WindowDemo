<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <system.serviceModel>
        <services>
            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.Binding.Hello" behaviorConfiguration="BindingBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <!--<endpoint binding="basicHttpBinding" contract="WCF.ServiceLib.Binding.IHello" address="Hello" />-->
                <endpoint binding="netTcpBinding" contract="WCF.ServiceLib.Binding.IHello" address="net.tcp://localhost:54321/Binding/Hello" />
                <!--元数据交换的endpoint-->
                <!--注：address是mex，它会和host/baseAddresses节点中的baseAddress做拼接，即提供元数据交换的地址为：http://localhost:12345/Binding/mex-->
                <endpoint binding="mexHttpBinding" contract="IMetadataExchange" address="mex" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/Binding/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.Message.OneWay" behaviorConfiguration="MessageBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <endpoint address="" binding="basicHttpBinding" contract="WCF.ServiceLib.Message.IOneWay" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/Message/OneWay/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.Message.Duplex" behaviorConfiguration="MessageBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <!--双向通讯可以基于Http, TCP, Named Pipe, MSMQ；其中基于Http的双向通讯会创建两个信道(Channel)，即需要创建两个http连接-->
                <!--endpoint address="Message/Duplex" binding="wsDualHttpBinding" contract="WCF.ServiceLib.Message.IDuplex" /-->
                <endpoint address="Message/Duplex" binding="netTcpBinding" contract="WCF.ServiceLib.Message.IDuplex" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/Message/Duplex"/>
                        <add baseAddress="net.tcp://localhost:54321/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.Message.Streamed" behaviorConfiguration="MessageBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <!--bindingConfiguration - 指定相关的绑定配置-->
                <endpoint address="Message/Streamed" binding="netTcpBinding" contract="WCF.ServiceLib.Message.IStreamed" bindingConfiguration="StreamedBindingConfiguration" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/Message/Streamed/"/>
                        <add baseAddress="net.tcp://localhost:54321/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.InstanceMode.PerCallMode" behaviorConfiguration="InstanceModeBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <endpoint address="InstanceMode/PerCallMode" binding="netTcpBinding" contract="WCF.ServiceLib.InstanceMode.IPerCallMode" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/InstanceMode/PerCallMode/"/>
                        <add baseAddress="net.tcp://localhost:54321/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.InstanceMode.PerSessionMode" behaviorConfiguration="InstanceModeBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <endpoint address="InstanceMode/PerSessionMode" binding="netNamedPipeBinding" contract="WCF.ServiceLib.InstanceMode.IPerSessionMode" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/InstanceMode/PerSessionMode/"/>
                        <add baseAddress="net.pipe://localhost/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.InstanceMode.SingleMode" behaviorConfiguration="InstanceModeBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <endpoint address="" binding="wsHttpBinding" contract="WCF.ServiceLib.InstanceMode.ISingleMode" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/InstanceMode/SingleMode/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.Message.DuplexReentrant" behaviorConfiguration="MessageBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <endpoint address="Message/DuplexReentrant" binding="netTcpBinding" contract="WCF.ServiceLib.Message.IDuplexReentrant" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/Message/DuplexReentrant"/>
                        <add baseAddress="net.tcp://localhost:54321/"/>
                    </baseAddresses>
                </host>
            </service>

            <!--name - 提供服务的类名-->
            <!--behaviorConfiguration - 指定相关的行为配置-->
            <service name="WCF.ServiceLib.Message.MSMQ" behaviorConfiguration="MessageBehavior">
                <!--address - 服务地址-->
                <!--binding - 通信方式-->
                <!--contract - 服务契约-->
                <!--bindingConfiguration - 指定相关的绑定配置-->
                <endpoint address="" binding="netMsmqBinding" contract="WCF.ServiceLib.Message.IMSMQ" bindingConfiguration="MSMQBindingConfiguration" />
                <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange" />
                <host>
                    <baseAddresses>
                        <add baseAddress="http://localhost:12345/Message/MSMQ"/>
                        <add baseAddress="net.msmq://localhost/private/SampleMSMQ"/>
                    </baseAddresses>
                </host>
            </service>
        </services>
        <behaviors>
            <serviceBehaviors>
                <behavior name="BindingBehavior">
                    <!--httpGetEnabled - 指示是否发布服务元数据以便使用 HTTP/GET 请求进行检索，如果发布 WSDL，则为 true，否则为 false，默认值为 false-->
                    <serviceMetadata httpGetEnabled="true" />
                </behavior>

                <behavior name="MessageBehavior">
                    <!--httpGetEnabled - 指示是否发布服务元数据以便使用 HTTP/GET 请求进行检索，如果发布 WSDL，则为 true，否则为 false，默认值为 false-->
                    <serviceMetadata httpGetEnabled="true" />
                    <serviceDebug includeExceptionDetailInFaults="true"/>
                </behavior>

                <behavior name="InstanceModeBehavior">
                    <!--httpGetEnabled - 指示是否发布服务元数据以便使用 HTTP/GET 请求进行检索，如果发布 WSDL，则为 true，否则为 false，默认值为 false-->
                    <serviceMetadata httpGetEnabled="true" />
                    <serviceDebug includeExceptionDetailInFaults="true"/>
                </behavior>
            </serviceBehaviors>
        </behaviors>
        <bindings>
            <netTcpBinding>
                <!--transferMode - 指示通道是使用流处理模式还是缓冲模式来传输请求和响应消息-->
                <!--maxReceivedMessageSize - 在采用此绑定配置的通道上可接收的最大消息大小（单位：字节）-->
                <!--receiveTimeout - 在传输引发异常之前可用于完成读取操作的时间间隔-->
                <binding name="StreamedBindingConfiguration" transferMode="Streamed" maxReceivedMessageSize="1073741824" receiveTimeout="00:10:00" />
            </netTcpBinding>

            <netMsmqBinding>
                <binding name="MSMQBindingConfiguration">
                    <security>
                        <!--msmqAuthenticationMode - 指示 MSMQ 传输必须采用什么方式对消息进行身份验证，默认值 WindowsDomain -->
                        <!--MsmqAuthenticationMode.None - 不使用任何安全性-->
                        <!--MsmqAuthenticationMode.WindowsDomain - 通过 Kerberos 进行身份验证，客户端和服务器必须连接到受信任域-->
                        <!--MsmqAuthenticationMode.Certificate - 客户端通过 X.509 证书进行身份验证，客户端证书必须显示在服务器的证书存储区中-->

                        <!--msmqProtectionLevel - 保护级别，设置与 MsmqAuthenticationMode 相关联的 ProtectionLevel，默认值 Sign -->
                        <!--ProtectionLevel.None - 只做身份验证-->
                        <!--ProtectionLevel.Sign - 对数据做签名，以确保所传输数据的完整性-->
                        <!--ProtectionLevel.EncryptAndSign - 对数据做加密和签名，以确保所传输数据的保密性和完整性-->
                        <transport msmqAuthenticationMode="None" msmqProtectionLevel="None" />

                        <!--clientCredentialType - 客户端用以进行身份验证的凭据的类型，默认值 UserName -->
                        <!--BasicHttpMessageCredentialType.UserName - 使用用户名凭据对客户端进行身份验证-->
                        <!--BasicHttpMessageCredentialType.Certificate - 使用证书对客户端进行身份验证-->
                        <message clientCredentialType="UserName" />
                    </security>
                </binding>
            </netMsmqBinding>
        </bindings>
    </system.serviceModel>
</configuration>
