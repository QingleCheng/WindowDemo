<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <system.serviceModel>
        <client>
            <!--address - 服务地址-->
            <!--binding - 通信方式-->
            <!--contract - 服务契约-->
            <!--bindingConfiguration - 指定相关的绑定配置-->
            <endpoint address="net.tcp://localhost:54321/Binding/Hello" binding="netTcpBinding"
                contract="BindingSvc.Hello.IHello" />
            <endpoint address="http://localhost:12345/Message/OneWay/" binding="basicHttpBinding"
                contract="MessageSvc.OneWay.IOneWay" />
            <endpoint address="net.tcp://localhost:54321/Message/Duplex"
                binding="netTcpBinding" contract="MessageSvc.Duplex.IDuplex" />
            <endpoint address="net.tcp://localhost:54321/Message/Streamed"
                binding="netTcpBinding" bindingConfiguration="StreamedBindingConfiguration"
                contract="MessageSvc.Streamed.IStreamed" />
            <endpoint address="net.tcp://localhost:54321/Message/DuplexReentrant"
                binding="netTcpBinding" contract="MessageSvc.DuplexReentrant.IDuplexReentrant" />
            <endpoint address="net.msmq://localhost/private/SampleMSMQ" binding="netMsmqBinding"
                contract="MessageSvc.MSMQ.IMSMQ" bindingConfiguration="MSMQBindingConfiguration" />
        </client>
        <bindings>
            <netMsmqBinding>
                <binding name="MSMQBindingConfiguration">
                    <security>
                        <!--msmqAuthenticationMode - 指示 MSMQ 传输必须采用什么方式对消息进行身份验证，默认值 WindowsDomain -->
                        <!--MsmqAuthenticationMode.None - 不使用任何安全性-->
                        <!--MsmqAuthenticationMode.WindowsDomain - 通过 Kerberos 进行身份验证，客户端和服务器必须连接到受信任域-->
                        <!--MsmqAuthenticationMode.Certificate - 客户端通过 X.509 证书进行身份验证，客户端证书必须显示在服务器的证书存储区中-->

                        <!--msmqProtectionLevel - 保护级别，设置与 MsmqAuthenticationMode 相关联的 ProtectionLevel，默认值 Sign -->
                        <!--ProtectionLevel.None - 只做身份验证-->
                        <!--ProtectionLevel.Sign - 对数据做签名，以确保所传输数据的完整性-->
                        <!--ProtectionLevel.EncryptAndSign - 对数据做加密和签名，以确保所传输数据的保密性和完整性-->
                        <transport msmqAuthenticationMode="None" msmqProtectionLevel="None" />

                        <!--clientCredentialType - 客户端用以进行身份验证的凭据的类型，默认值 UserName -->
                        <!--BasicHttpMessageCredentialType.UserName - 使用用户名凭据对客户端进行身份验证-->
                        <!--BasicHttpMessageCredentialType.Certificate - 使用证书对客户端进行身份验证-->
                        <message clientCredentialType="UserName" />
                    </security>
                </binding>
            </netMsmqBinding>
            <netTcpBinding>
                <!--transferMode - 指示通道是使用流处理模式还是缓冲模式来传输请求和响应消息-->
                <!--sendTimeout - 在传输引发异常之前可用于完成写入操作的时间间隔-->
                <binding name="StreamedBindingConfiguration" sendTimeout="00:10:00"
                    transferMode="Streamed" />
            </netTcpBinding>
        </bindings>
    </system.serviceModel>
</configuration>